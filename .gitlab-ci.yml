stages:
  - install
  - build
  - release
  - deploy

install_deps:
  tags:
    - kube-dev
  stage: install
  image: reg.1cb.kz/dockerhub/library/node:16.17.1-alpine3.15
  artifacts:
    paths:
      - node_modules
    expire_in: 15 minute
  script:
    - npm i

.base_build: &base_build
  image: reg.1cb.kz/dockerhub/library/node:16.17.1-alpine3.15
  artifacts:
    expire_in: 5 minute
    paths:
      - ./build
  dependencies:
    - install_deps

build:dev:
  tags:
    - kube-dev
  only:
    - dev
  <<: *base_build
  stage: build
  environment:
    name: staging
  variables:
    CONTAINER_TAGGED_IMAGE: $HR_REGISTRY/$CI_PROJECT_NAME-$CI_PROJECT_ID/$CI_PROJECT_NAME:$CI_ENVIRONMENT_SLUG-$CI_PIPELINE_ID
  script:
    - yarn -v
    - yarn build

build:prod:
  tags:
    - kube-build
  only:
    - master
  <<: *base_build
  stage: build
  environment:
    name: production
  variables:
    CONTAINER_TAGGED_IMAGE: $HR_REGISTRY/$CI_PROJECT_NAME-$CI_PROJECT_ID/$CI_PROJECT_NAME:$CI_ENVIRONMENT_SLUG-$CI_PIPELINE_ID
  script:
    - yarn -v
    - yarn build

.base_release: &base_release
  image:
    name: reg.1cb.kz/library/kaniko-project/executor:debug
    entrypoint: [""]
  allow_failure: false

release:dev:
  tags:
    - kube-dev
  only:
    - dev
  stage: release
  environment:
    name: staging
  variables:
    CONTAINER_TAGGED_IMAGE: $HR_REGISTRY/$CI_PROJECT_NAME-$CI_PROJECT_ID/$CI_PROJECT_NAME:$CI_ENVIRONMENT_SLUG-$CI_PIPELINE_ID
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$HR_REGISTRY\":{\"username\":\"$HR_REGISTRY_USER\",\"password\":\"$HR_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - KANIKOPROXYBUILDARGS="--build-arg BACKEND_URL_PRE_CHECK=$BACKEND_URL_PRE_CHECK --build-arg BACKEND_URL_INTEGRATION_ADMIN=$BACKEND_URL_INTEGRATION_ADMIN --build-arg BACKEND_URL_INTEGRATION_FRP=$BACKEND_URL_INTEGRATION_FRP --build-arg BACKEND_URL_BVU=$BACKEND_URL_BVU --build-arg BACKEND_URL_AUTH_ROLE=$BACKEND_URL_AUTH_ROLE --build-arg BACKEND_URL_LAK_EMPLOYEE=$BACKEND_URL_LAK_EMPLOYEE"
    - echo $KANIKOPROXYBUILDARGS
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile $KANIKOPROXYBUILDARGS --destination $CONTAINER_TAGGED_IMAGE
  dependencies:
    - build:dev
  <<: *base_release

release:prod:
  tags:
    - kube-build
  only:
    - master
  stage: release
  environment:
    name: production
  variables:
    CONTAINER_TAGGED_IMAGE: $HR_REGISTRY/$CI_PROJECT_NAME-$CI_PROJECT_ID/$CI_PROJECT_NAME:$CI_ENVIRONMENT_SLUG-$CI_PIPELINE_ID
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$HR_REGISTRY\":{\"username\":\"$HR_REGISTRY_USER\",\"password\":\"$HR_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - KANIKOPROXYBUILDARGS="--build-arg BACKEND_URL_PRE_CHECK=$BACKEND_URL_PRE_CHECK --build-arg BACKEND_URL_INTEGRATION_ADMIN=$BACKEND_URL_INTEGRATION_ADMIN --build-arg BACKEND_URL_INTEGRATION_FRP=$BACKEND_URL_INTEGRATION_FRP --build-arg BACKEND_URL_BVU=$BACKEND_URL_BVU --build-arg BACKEND_URL_AUTH_ROLE=$BACKEND_URL_AUTH_ROLE --build-arg BACKEND_URL_LAK_EMPLOYEE=$BACKEND_URL_LAK_EMPLOYEE"
    - echo $KANIKOPROXYBUILDARGS
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile $KANIKOPROXYBUILDARGS --destination $CONTAINER_TAGGED_IMAGE
  dependencies:
    - build:prod
  <<: *base_release

.base_deploy: &base_deploy
  stage: deploy
  variables:
    CONTAINER_TAGGED_IMAGE: $HR_REGISTRY/$CI_PROJECT_NAME-$CI_PROJECT_ID/$CI_PROJECT_NAME:$CI_ENVIRONMENT_SLUG-$CI_PIPELINE_ID
  tags:
    - k8s-ext-prod # ключевой параметр определяющий раннер для сборки
  before_script:
    - kubectl config use-context autonesie/gitlab-agent:gitlab-agent-k8s-ext-prod
  image: reg.1cb.kz/library/kubectl
  script:
    - kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
    - kubectl create secret docker-registry harbor-$CI_PROJECT_ID --docker-server=$HR_REGISTRY --docker-username=$HR_REGISTRY_USER --docker-password=$HR_REGISTRY_PASSWORD --docker-email=$GITLAB_USER_EMAIL --dry-run=client -o yaml | kubectl -n $NAMESPACE apply -f -
    - cat ./k8s/service.yml | envsubst | kubectl apply -n $NAMESPACE -f -
    - cat ./k8s/deployment.yml | envsubst | kubectl apply -n $NAMESPACE -f -
    - cat ./k8s/ingress.yml | envsubst | kubectl apply -n $NAMESPACE -f -

deploy:dev:
  environment:
    name: staging
  dependencies: []
  variables:
    REPLICAS: 1
  only:
    refs:
      - dev
  #when: manual
  <<: *base_deploy

deploy:prod:
  environment:
    name: production
  dependencies: []
  variables:
    REPLICAS: 1
  only:
    refs:
      - master
  when: manual
  <<: *base_deploy
